/*
 * CatalogObjectEntity Catalog API
 * The purpose of the catalog is to store ProActive objects.  A catalog is subdivided into buckets.   Each bucket manages zero, one or more versioned ProActive objects.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.BucketMetadata;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for BucketControllerApi
 */
@Ignore
public class BucketControllerApiTest {

    private final BucketControllerApi api = new BucketControllerApi();

    
    /**
     * Delete the empty buckets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cleanEmptyUsingDELETETest() {
        api.cleanEmptyUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * Creates a new bucket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOSTTest() {
        String sessionID = null;
        String name = null;
        String owner = null;
        BucketMetadata response = api.createUsingPOST(sessionID, name, owner);

        // TODO: test validations
    }
    
    /**
     * Delete an empty bucket
     *
     * It&#39;s forbidden to delete a non-empty bucket. You need to delete manually all workflows in the bucket before.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() {
        String bucketName = null;
        String sessionID = null;
        api.deleteUsingDELETE(bucketName, sessionID);

        // TODO: test validations
    }
    
    /**
     * Gets a bucket&#39;s metadata by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetadataUsingGETTest() {
        String bucketName = null;
        String sessionID = null;
        BucketMetadata response = api.getMetadataUsingGET(bucketName, sessionID);

        // TODO: test validations
    }
    
    /**
     * Lists the buckets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsingGETTest() {
        String sessionID = null;
        String owner = null;
        String kind = null;
        List<BucketMetadata> response = api.listUsingGET(sessionID, owner, kind);

        // TODO: test validations
    }
    
}
